name: Test Container Build

on:
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  test-build:
    name: Test Docker Image Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry (for cache)
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build Backend API image (test only)
      uses: docker/build-push-action@v5
      with:
        context: ./backend/GrafanaBanana.Api
        file: ./backend/GrafanaBanana.Api/Dockerfile
        push: false
        tags: |
          ghcr.io/${{ github.repository }}/backend:test-${{ github.event.pull_request.number || github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true
    
    - name: Build Frontend image (test only)
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: |
          ghcr.io/${{ github.repository }}/frontend:test-${{ github.event.pull_request.number || github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true
    
    - name: Test Backend container
      run: |
        # Start the backend container
        docker run -d --name test-backend \
          -e ASPNETCORE_ENVIRONMENT=Development \
          -e ASPNETCORE_URLS=http://+:8080 \
          -p 5000:8080 \
          ghcr.io/${{ github.repository }}/backend:test-${{ github.event.pull_request.number || github.sha }}
        
        # Wait for the container to be ready
        echo "Waiting for backend to start..."
        sleep 10
        
        # Check if container is still running
        if ! docker ps | grep -q test-backend; then
          echo "Backend container failed to start"
          docker logs test-backend
          exit 1
        fi
        
        # Test health endpoint
        echo "Testing health endpoint..."
        if curl -f http://localhost:5000/health; then
          echo "âœ“ Backend health check passed"
        else
          echo "âœ— Backend health check failed"
          docker logs test-backend
          exit 1
        fi
        
        # Clean up
        docker stop test-backend
        docker rm test-backend
    
    - name: Test Frontend container
      run: |
        # Start the frontend container
        docker run -d --name test-frontend \
          -p 4200:80 \
          ghcr.io/${{ github.repository }}/frontend:test-${{ github.event.pull_request.number || github.sha }}
        
        # Wait for the container to be ready
        echo "Waiting for frontend to start..."
        sleep 5
        
        # Check if container is still running
        if ! docker ps | grep -q test-frontend; then
          echo "Frontend container failed to start"
          docker logs test-frontend
          exit 1
        fi
        
        # Test that nginx is serving content
        echo "Testing frontend endpoint..."
        if curl -f http://localhost:4200; then
          echo "âœ“ Frontend is serving content"
        else
          echo "âœ— Frontend failed to serve content"
          docker logs test-frontend
          exit 1
        fi
        
        # Clean up
        docker stop test-frontend
        docker rm test-frontend
    
    - name: Generate test summary
      if: always()
      run: |
        echo "## ðŸ§ª Container Build Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "âœ“ Backend Docker image built successfully" >> $GITHUB_STEP_SUMMARY
        echo "âœ“ Frontend Docker image built successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Details" >> $GITHUB_STEP_SUMMARY
        echo "- Pull Request: #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
        echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The containers are ready to be published when merged to main." >> $GITHUB_STEP_SUMMARY
