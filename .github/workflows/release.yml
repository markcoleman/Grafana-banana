name: Manual Release and Publish Containers

# This workflow handles manual releases via:
# 1. Manual workflow dispatch with a specific version tag
# 2. When a GitHub release is manually created
# 3. When a tag matching v*.*.* is manually pushed
#
# For automatic releases on push to main, see publish-release.yml

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag/Version to publish (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ inputs.tag }}"
        elif [ "${{ github.event_name }}" == "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        # Remove 'v' prefix if present
        VERSION=${VERSION#v}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"
    
    - name: Build and push Backend API image
      uses: docker/build-push-action@v5
      with:
        context: ./backend/GrafanaBanana.Api
        file: ./backend/GrafanaBanana.Api/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/backend:${{ steps.version.outputs.version }}
          ghcr.io/${{ github.repository }}/backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/frontend:${{ steps.version.outputs.version }}
          ghcr.io/${{ github.repository }}/frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Generate deployment summary
      run: |
        echo "## ðŸŽ‰ Release Published" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Docker Images" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Backend API:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "ghcr.io/${{ github.repository }}/backend:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "ghcr.io/${{ github.repository }}/backend:latest" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Frontend:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "ghcr.io/${{ github.repository }}/frontend:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "ghcr.io/${{ github.repository }}/frontend:latest" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Pull Images" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "docker pull ghcr.io/${{ github.repository }}/backend:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ghcr.io/${{ github.repository }}/frontend:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
